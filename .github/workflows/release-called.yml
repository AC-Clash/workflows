name: Release Called Workflow

on:
  workflow_call:
    secrets:
      token:
        required: true
      passwd:
        required: true

permissions:
  contents: write

jobs:
  release:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Prepare local repo
        run: |
          # Get remote tags
          git fetch --tags
          # Get permission to run gradle script
          chmod +x gradlew

      - name: Set up packages
        run: |
          sudo apt update
          sudo apt install msmtp mutt jq
          cat > ~/.msmtprc <<EOF
          # Gmail configuration
          account default
          host smtp.gmail.com
          port 587
          auth on
          tls on
          tls_trust_file /etc/ssl/certs/ca-certificates.crt
          user ansorensen1118@gmail.com
          password ${{ secrets.PASSWD }}
          from ansorensen1118@gmail.com
          logfile ~/.msmtp.log
          EOF
          
          chmod 600 ~/.msmtprc
          
          cat > ~/.muttrc <<EOF
          set sendmail="/usr/bin/msmtp"
          set use_from=yes
          set realname="Anston Sorensen"
          set from="ansorensen1118@gmail.com"
          EOF

      - name: Get Java version
        id: retrieve_java
        run: |
          properties=$(./gradlew -q properties)
          {
          echo 'properties<<EOF'
          echo "$properties"
          echo EOF
          } >> "$GITHUB_OUTPUT"
          key="targetCompatibility"
          target=$(echo "$properties" | awk -F': ' -v key="$key" '$1 == key {print $2}')
          target=$(echo "$target" | sed 's/^1\.//')
          echo "target=$target" >> $GITHUB_OUTPUT
          echo "This project requires JDK version $target"

      - name: Download JDK
        uses: actions/setup-java@v4
        with:
          distribution: 'corretto'
          java-version: '${{ steps.retrieve_java.outputs.target }}'

      - name: Get last version
        id: last_version
        run: |
         last_tag=$(git rev-list --tags --max-count=1)
         echo "The hash of the last tag commit is $last_tag"
         if [ "$last_tag" = "" ]; then
           echo "There are no previous tags. There could have been an early snapshot version"
           echo "unversioned=true" >> $GITHUB_OUTPUT
           echo "changed=true" >> $GITHUB_ENV
         else
           echo "last_tag=$last_tag" >> $GITHUB_OUTPUT
           last_version=$(git describe --tags $last_tag)
           last_version_num=${last_version//"v"/}
           echo "last_version_num=$last_version_num" >> $GITHUB_OUTPUT
           echo "The last version was $last_version_num"
         fi

      - name: Determine current version
        id: determine_version
        run: |
          key="version"
          version_num=$(echo "${{ steps.retrieve_java.outputs.properties }}" | awk -F': ' -v key="$key" '$1 == key {print $2}')
          if [ "$version_num" = "*SNAPSHOT*" ]; then
            echo "unversioned=true" >> $GITHUB_ENV
            echo "changed=false" >> $GITHUB_ENV
            echo "Snapshot version detected. Nothing to do here"
          else
            echo "version_num=$version_num" >> $GITHUB_OUTPUT
            echo "The current version is $version_num"
          fi

      - name: Check if version has changed
        id: version_changed
        if: ${{ steps.last_version.outputs.unversioned != 'true' }}
        run: |
         changed="${{ steps.determine_version.outputs.version_num != steps.last_version.outputs.last_version_num }}"
         echo "changed=$changed" >> $GITHUB_ENV
         if [ "$changed" = "true" ]; then
           
           echo "The plugin has updated! The version has changed from ${{ steps.last_version.outputs.last_version_num }} to ${{ steps.determine_version.outputs.version_num }}"
         else
           echo "The plugin version hasn't changed"
         fi

      - name: Generate release notes
        id: release_notes
        if: ${{ env.changed == 'true' }}
        run: |
         # Get the hash of the last commit
         unversioned=${{ steps.last_version.outputs.unversioned }}
         if [ "$unversioned" = "true" ]; then
           last_commit=$(git rev-list --max-parents=0 HEAD)
         else
           last_commit=${{ steps.last_version.outputs.last_tag }}
         fi
         echo "The hash of the last version's commit is $last_commit"

         # Get commit messages since then
         commit_messages="$(git log --pretty=format:"%s" $last_commit..HEAD)"
          
         if [ "$commit_message" != "" ]; then
           printf "Here are the new commit messages! \n$commit_messages"
          
           # Generate end of file delimiter
           EOF=$(dd if=/dev/urandom bs=15 count=1 status=none | base64)
          
           #Initialize release_notes
           echo "release_notes<<$EOF" >> $GITHUB_OUTPUT
          
           # Add each line
           echo "$commit_messages" | while IFS= read -r line
           do
              echo "* $line" >> $GITHUB_OUTPUT
           done
          
           # Finish
           echo "$EOF" >> $GITHUB_OUTPUT
         else
           echo "No new commit messages. Assuming it was only a version change"
           release_notes="* Updated version to ${{ steps.determine_version.outputs.version_num }}"
           echo "release_notes=$release_notes" >> $GITHUB_OUTPUT
         fi

      - name: Create release
        id: create_release
        if: ${{ env.changed == 'true' }}
        run: |
          echo "Pushing tag for release..."
          git tag v${{ steps.determine_version.outputs.version_num }} ${{ github.sha }}
          git push origin tag v${{ steps.determine_version.outputs.version_num }}
          echo "Creating release with the following info..."
          echo "Tag: v${{ steps.determine_version.outputs.version_num }}"
          echo "Name: ${{ steps.determine_version.outputs.version_num }}"
          echo "Body: "
          echo "${{ steps.release_notes.outputs.release_notes }}"
          id=$( curl -L \
            -X POST \
            -H "Accept: application/vnd.github+json" \
            -H "Authorization: Bearer ${{ secrets.TOKEN }}" \
            -H "X-GitHub-Api-Version: 2022-11-28" \
            https://api.github.com/repos/${{ github.repository }}/releases \
            -d '{"tag_name":"v${{ steps.determine_version.outputs.version_num }}","name":"${{ steps.determine_version.outputs.version_num }}","body":"${{ steps.release_notes.outputs.release_notes }}","draft":false,"prerelease":false,"generate_release_notes":true}' | jq '.id' )
          echo "The ID is $id"
          echo "id=$id" >> $GITHUB_OUTPUT

      - name: Build JAR file
        id: build_jar
        if: ${{ env.changed == 'true' }}
        run: |
          ./gradlew build

      - name: Upload assets
        if: ${{ env.changed == 'true' }}
        run: |
          file_name=$(find build/libs/ -type f -name "*.jar" ! -name "*dev.jar" ! -name "*dev-all.jar")
          file_name_f=${file_name// /-}
          if [ "$file_name" != "$file_name_f" ]; then
            mv "$file_name" "$file_name_f"
          fi
          echo "The JAR file relative name is $file_name_f"
          base_name=$(basename "$file_name_f")
          echo "The JAR file base name is $base_name"
          curl -L \
            -X POST \
            -H "Accept: application/vnd.github+json" \
            -H "Authorization: Bearer ${{ secrets.TOKEN }}" \
            -H "X-GitHub-Api-Version: 2022-11-28" \
            -H "Content-Type: multipart/form-data" \
            "https://uploads.github.com/repos/${{ github.repository }}/releases/${{ steps.create_release.outputs.id }}/assets?name=$base_name" \
            --data-binary "@$file_name_f"

      - name: Notify author
        if: ${{ env.changed == 'true' }}
        run: |
         cat > email_body.html <<EOF
         <html>
         <body>
           <a href="https://github.com/${{ github.repository }}/releases/tag/v${{ steps.determine_version.outputs.version_num }}">Release v${{ steps.determine_version.outputs.version_num }}</a> has been automatically published!<br><br>
           Commits:<br>
           ${{ steps.release_notes.outputs.release_notes }}<br><br>
           Best regards,<br>
           ${{ runner.name }} Runner
         </body>
         </html>
         EOF
         mutt -e 'set content_type=text/html' -s "[${{ github.repository }}] Release v${{ steps.determine_version.outputs.version_num }} Published" ansorensen1118@gmail.com < email_body.html
