name: Release Called Workflow

on:
  workflow_call:
    secrets:
      token:
        required: true

permissions:
  contents: write

jobs:
  release:
    runs-on: self-hosted

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Prepare local repo
        run: |
          git fetch --tags origin
          chmod +x gradlew

      - name: Get Java info
        id: retrieve_java
        run: |
          properties=$(./gradlew -q properties)
          echo "properties=$properties" >> $GITHUB_OUTPUT
          key="targetCompatibility"
          target=$(echo "$properties" | awk -F': ' -v key="$key" '$1 == key {print $2}')"
          echo "target=$target" >> $GITHUB_OUTPUT
          echo "This project requires JDK version $target"
          
          # Get installed JDK versions
          java_list=$(update-alternatives --list java)
          for i in $java_list; do
            version_output=$("$java_list" --version 2>&1 | head -n 1)
            version=$(echo "$version_output" | awk -F' ' '{print $2}')
            major_version=$(echo "$version" | awk -F'.' '{print $1}')
            # For versions like 1.8, the major version is the second part
            if [ "$major_version" = "1" ]; then
              major_version=$(echo "$version" | awk -F'.' '{print $2}')
            fi
            echo "Found JDK version $major_version"
            if [ "$major_version" = "$target" ]; then
              echo "JDK version matches required version. Using the JDK entry '$i'"
              java_exec=$i
              echo "java_exec=$java_exec" >> $GITHUB_OUTPUT
              echo "has_jdk=true" >> $GITHUB_OUTPUT
              break
            fi
          done

      - name: Set up JDK
        if: ${{ steps.retrieve_java.outputs.has_jdk != 'true' }}
        uses: actions/setup-java@v4
        with:
          distribution: 'adopt'
          java-version: '${{ steps.retrieve_java.outputs.target }}'

      - name: Get last version
        id: last_version
        run: |
         last_tag=$(git rev-list --tags --max-count=1)
         if [ "$last_tag" = "" ]; then
           echo "There are no previous tags. There could have been an early snapshot version"
           echo "unversioned=true" >> $GITHUB_OUTPUT
           echo "changed=true" >> $GITHUB_ENV
         else
           last_version=$(git describe --tags $last_tag)
           echo "last_version=$last_version" >> $GITHUB_OUTPUT
           echo "last_tag=$last_tag" >> $GITHUB_OUTPUT
           echo "The last version was $last_version"
         fi

      - name: Determine current version
        id: determine_version
        run: |
          key="version"
          version_num=$(echo "$properties" | awk -F': ' -v key="$key" '$1 == key {print $2}')
          if [ "$version_num" = "*SNAPSHOT*" ]; then
            echo "unversioned=true" >> $GITHUB_ENV
            echo "changed=false" >> $GITHUB_ENV
            echo "Snapshot version detected. Nothing to do here"
          else
            echo "version_num=$version_num" >> $GITHUB_OUTPUT
            echo "version=v$version_num" >> $GITHUB_OUTPUT
            echo "The current version is v$version_num"
          fi

      - name: Check if version has changed
        id: version_changed
        if: ${{ steps.last_version.outputs.unversioned != 'true' }}
        run: |
         changed="${{ steps.determine_version.outputs.version != steps.previous_version.outputs.last_version }}"
         echo "changed=$changed" >> $GITHUB_ENV
         if [ "$changed" = "true" ]; then
           echo "The plugin version has changed!"
         else
           echo "The plugin version hasn't changed"
         fi

      - name: Generate release notes
        id: release_notes
        if: ${{ env.changed == 'true' }}
        run: |
         # Get the hash of the last commit
         unversioned=${{ steps.last_version.outputs.unversioned }}
         if [ "$unversioned" = "true" ]; then
           last_commit=$(git rev-list --max-parents=0 HEAD)
         else
           last_commit=${{ steps.last_version.outputs.last_tag }}
         fi
         echo "The hash of the last version's commit is $last_commit"

         # Get commit messages since then
         commit_messages="$(git log --pretty=format:"%s" $last_commit..HEAD)"
          
         if [ "$commit_message" != "" ]; then
           printf "Here are the new commit messages! \n$commit_messages"
          
           # Generate end of file delimiter
           EOF=$(dd if=/dev/urandom bs=15 count=1 status=none | base64)
          
           #Initialize release_notes
           echo "release_notes<<$EOF" >> $GITHUB_OUTPUT
          
           # Add each line
           echo "$commit_messages" | while IFS= read -r line
           do
              echo "* $line" >> $GITHUB_OUTPUT
           done
          
           # Finish
           echo "$EOF" >> $GITHUB_OUTPUT
         else
           echo "No new commit messages. Assuming it was only a version change"
           release_notes="* Updated version to ${{ steps.determine_version.outputs.version_num }}"
           echo "release_notes=$release_notes" >> $GITHUB_OUTPUT
         fi

      - name: Create release
        id: create_release
        if: ${{ env.changed == 'true' }}
        run: |
          echo "Pushing release with the following info..."
          echo "Tag: ${{ steps.determine_version.outputs.version }}"
          echo "Version: ${{ steps.determine_version.outputs.version_num }}"
          echo "Body: "
          echo "${{ steps.release_notes.outputs.release_notes }}"
          id=$( curl -L \
            -X POST \
            -H "Accept: application/vnd.github+json" \
            -H "Authorization: Bearer ${{ secrets.TOKEN }}" \
            -H "X-GitHub-Api-Version: 2022-11-28" \
            https://api.github.com/repos/${{ github.repository }}/releases \
            -d '{"tag_name":"${{ steps.determine_version.outputs.version }}","name":"${{ steps.determine_version.outputs.version_num }}","body":"${{ steps.release_notes.outputs.release_notes }}","draft":false,"prerelease":false,"generate_release_notes":true}' | jq '.id' )
          echo "The ID is $id"
          echo "id=$id" >> $GITHUB_OUTPUT

      - name: Build JAR file
        id: build_jar
        if: ${{ env.changed == 'true' }}
        run: |
          directory=~/actions-runner/_work/${{ github.event.repository.name }}
          if [ -d "$directory/Build-Files/" ]; then
            rm -r $directory/Build-Files/build/libs/*
            cp -a $directory/Build-Files/. .
            echo "Copied previous build files"
            ./gradlew build
            rm -r $directory/Build-Files/*
            cp -R .gradle/ $directory/Build-Files/
            cp -R build/ $directory/Build-Files/
            echo "Updated build files"
          else
            echo "Previous build files weren't detected. This will take longer!"
            mkdir $directory/Build-Files/
            ./gradlew build
            cp -R .gradle/ $directory/Build-Files/
            cp -R build/ $directory/Build-Files/
            echo "Backed up build files"
          fi

      - name: Upload assets
        if: ${{ env.changed == 'true' }}
        run: |
          file_name=$(find build/libs/ -type f -name "*.jar" ! -name "*dev.jar" ! -name "*dev-all.jar")
          base_name=$(basename $file_name)
          curl -L \
            -X POST \
            -H "Accept: application/vnd.github+json" \
            -H "Authorization: Bearer ${{ secrets.TOKEN }}" \
            -H "X-GitHub-Api-Version: 2022-11-28" \
            -H "Content-Type: multipart/form-data" \
            "https://uploads.github.com/repos/${{ github.repository }}/releases/${{ steps.create_release.outputs.id }}/assets?name=$base_name" \
            --data-binary "@$file_name"
