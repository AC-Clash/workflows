name: Release Called Workflow

on:
  workflow_call:
    secrets:
      token:
        required: true

permissions:
  contents: write

jobs:
  release:
    runs-on: self-hosted

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Prepare local repo
        run: |
          git fetch --tags origin
          chmod +x gradlew

      - name: Set up JDK
        uses: actions/setup-java@v4
        with:
          distribution: 'adopt'
          java-version: '21'

      - name: Get last version
        id: last_version
        run: |
         last_tag=$(git rev-list --tags --max-count=1)
         if [[ $last_tag == "" ]]; then
           echo "There are no previous tags. Adding changes since initial commit..."
           echo "no_tags=true" >> $GITHUB_OUTPUT
           echo "changed=true" >> $GITHUB_ENV
         else
           last_version=$(git describe --tags $last_tag)
           echo "last_version=$last_version" >> $GITHUB_OUTPUT
           echo "last_tag=$last_tag" >> $GITHUB_OUTPUT
           echo "The last version was $last_version"
         fi

      - name: Determine current version
        id: determine_version
        run: |
          version_num=$(./gradlew printVersion)
          echo "version_num=$version_num" >> $GITHUB_OUTPUT
          echo "version=v$version_num" >> $GITHUB_OUTPUT
          echo "The current version is v$version_num"

      - name: Check if version has changed
        id: version_changed
        if: ${{ steps.last_version.outputs.no_tags != 'true' }}
        run: |
         changed="${{ steps.determine_version.outputs.version != steps.previous_version.outputs.last_version }}"
         echo "changed=$changed" >> $GITHUB_ENV
         if [ $changed == 'true' ]; then
           echo "The plugin version has changed!"
         else
           echo "The plugin version hasn't changed"
         fi

      - name: Generate release notes
        id: release_notes
        if: ${{ env.changed == 'true' }}
        run: |
         # Get the hash of the last commit
         no_tags=${{ steps.last_version.outputs.no_tags }}
         if [ $no_tags == 'true' ]; then
           last_commit=$(git rev-list --max-parents=0 HEAD)
         else
           last_commit=${{ steps.last_version.outputs.last_tag }}
         fi
         echo "The hash of the last version's commit is $last_commit"

         # Get commit messages since then
         commit_messages="$(git log --pretty=format:"%s" $last_commit..HEAD)"
         printf "Here are the new commit messages! \n$commit_messages"

         # Generate end of file delimiter
         EOF=$(dd if=/dev/urandom bs=15 count=1 status=none | base64)

         #Initialize release_notes
         echo "release_notes<<$EOF" >> $GITHUB_OUTPUT

         # Add each line
         echo "$commit_messages" | while IFS= read -r line
         do
            echo "* $line" >> $GITHUB_OUTPUT
         done

         # Finish
         echo "$EOF" >> $GITHUB_OUTPUT

      - name: Build JAR file
        id: build_jar
        if: ${{ env.changed == 'true' }}
        run: |
          directory=~/actions-runner/_work/${{ github.event.repository.name }}
          echo "directory=$directory" >> GITHUB_OUTPUT
          if [ -d "$directory/Build-Files/" ]; then
            rm -r $directory/Build-Files/build/libs/*
            cp -a $directory/Build-Files/. .
            echo "Copied previous build files"
            ./gradlew build
            rm -r $directory/Build-Files/*
            cp -R .gradle/ $directory/Build-Files/
            cp -R build/ $directory/Build-Files/
            echo "Updated build files"
          else
            echo "Previous build files weren't detected. This will take longer!"
            mkdir $directory/Build-Files/
            ./gradlew build
            cp -R .gradle/ $directory/Build-Files/
            cp -R build/ $directory/Build-Files/
            echo "Backed up build files"
          fi
          
      - name: Create release
        id: create_release
        if: ${{ env.changed == 'true' }}
        run: |
          #git tag -a ${{ steps.determine_version.outputs.version }} -m "Version ${{ steps.determine_version.outputs.version_num }}"
          #git push origin ${{ steps.determine_version.outputs.version }}
          id=$( curl -L \
            -X POST \
            -H "Accept: application/vnd.github+json" \
            -H "Authorization: Bearer ${{ secrets.TOKEN }}" \
            -H "X-GitHub-Api-Version: 2022-11-28" \
            https://api.github.com/repos/${{ github.repository }}/releases \
            -d '{"tag_name":"${{ steps.determine_version.outputs.version }}","name":"${{ steps.determine_version.outputs.version_num }}","body":"${{ steps.release_notes.outputs.release_notes }}","draft":false,"prerelease":false,"generate_release_notes":false}' | jq '.id' )
          echo "The ID is $id"
          echo "id=$id" >> $GITHUB_OUTPUT

      - name: Upload assets
        if: ${{ env.changed == 'true' }}
        run: |
          file_name=$(find build/libs/ -type f -name "*.jar" ! -name "*dev.jar" ! -name "*dev-all.jar")
          base_name=$(basename $file_name)
          curl -L \
            -X POST \
            -H "Accept: application/vnd.github+json" \
            -H "Authorization: Bearer ${{ secrets.TOKEN }}" \
            -H "X-GitHub-Api-Version: 2022-11-28" \
            -H "Content-Type: multipart/form-data" \
            "https://uploads.github.com/repos/${{ github.repository }}/releases/${{ steps.create_release.outputs.id }}/assets?name=$base_name" \
            --data-binary "@$file_name"
